#Write-Host ""
#Write-Host "Script: ;Purpose:Get template information." -BackgroundColor Black -ForegroundColor Yellow
#Write-Host ""

$MFedStatsPath = "master:\templates\Feature\Metadata\_MplsMetadata\MFed Stats"

#Get-ChildItem -Path "master:\templates\Feature\Metadata\_MplsMetadata\MFed Stats" | Format-Table -Property DisplayName, Id, TemplateName, Type, Title

$tContainer = "{"
$tLabel = '    "template" : {'
$tName = '        "name" : "MFed Stats", '
$tAttrLable = '        "attributes" : {'

$tFieldLabel1 = '            "'
$tFieldLabel2 = '" : {'

    $fDisplayName = '               "DisplayName" : "'
    $fEnd = '"'
    $fEndComma = ','
    $fType = '                "Type" : "'
    $fTitle = '                "Title" : "'
    $tFieldGroupEnd = "            }"    
    $tAttrEnd = "            }"    

    $tAttrEnd = "        }"
    $tEnd = "    }"
    $tContainerEnd = "}"


$tContainer
$tLabel
$tName
$tAttrLable

$i = 0

$itemCount = ( Get-ChildItem $MFedStatsPath | Measure-Object ).Count;

Get-ChildItem -Path $MFedStatsPath | ForEach-Object {


    "{0}{1}{2}" -f $tFieldLabel1, $i, $tFieldLabel2

    "{0}{1}{2}{3}" -f $fDisplayName, $_.DisplayName, $fEnd, $fEndComma
    "{0}{1}{2}{3}" -f $fType, $_.Type, $fEnd, $fEndComma
    "{0}{1}{2}" -f $fTitle, $_.Title, $fEnd

    $i = [int]$i + [int]1

    if ([int]$i -eq $itemCount) {
        $tFieldGroupEnd
    } Else {
        "{0}{1}" -f $tFieldGroupEnd, $fEndComma
    }
    
}

$tAttrEnd
$tEnd
$tContainerEnd



#function RunQuery {
#    param(
#        [scriptblock]$ScriptBlock
#    )
#    Write-Host "$($ScriptBlock.ToString())" -ForegroundColor "Green"
#    
#    & $ScriptBlock
#    
#    Write-Host ""
#    
#}

#Write-Host ""
#Write-Host "The following examples are just enough for you to see what the Windows PowerShell syntax looks like." -BackgroundColor Black -ForegroundColor Yellow
#Write-Host ""

#Write-Host "Start work in the context of 'master' database"
#RunQuery { Set-Location -Path master:\content }

#Write-Host "Get all children of the root item ('sitecore' is the root of the drive), you can add -Recurse parameter to list the whole tree"
#RunQuery { Get-ChildItem | Format-Table -Property Name, Languages, Children, ID -AutoSize | Out-Default }

#Write-Host "List all sitecore databases"
#RunQuery { Get-Database * | Format-Table -Property Name, Languages, ProxiesEnabled, Protected, ReadOnly, SecurityEnabled -AutoSize }

#Write-Host "List all sitecore search indexes"
#RunQuery { Get-SearchIndex | Format-Table -Property Name }

#Write-Host "List all available drives including sitecore databases"
#RunQuery { Get-PSDrive | Format-Table -Property Name, Root, Description, CurrentLocation -AutoSize }

#Write-Host "Piping sample - select master database and get its archives"
#RunQuery { Get-Database -Name master | Get-Archive | Format-Table }

#Write-Host "Thanks for installing the Sitecore PowerShell Extensions module! - Team SPE" -BackgroundColor Black -ForegroundColor Yellow
#Write-Host ""
#Write-Host "Below are some helpful links:" -BackgroundColor Black -ForegroundColor Yellow
#[PSCustomObject]@{"Title"="Github";"Link"="http://git.io/spe"},
#[PSCustomObject]@{"Title"="Gitbook";"Link"="https://sitecorepowershell.gitbooks.io/sitecore-powershell-extensions/"}