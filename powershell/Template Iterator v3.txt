Write-Host ""
Write-Host "Script:Template Iterator ::Purpose:Get template information." -BackgroundColor Black -ForegroundColor Yellow
Write-Host ""


function WriteTemplateJson([String] $path, [String] $folderName)
{
    Write-Host $path -ForegroundColor "Green"

    $fileDeliveryFolder =  "C:\inetpub\wwwroot\mfed\Website\data\json\"
    $fileExt = ".json"
    $pathNewFolder = "{0}\{1}" -f $fileDeliveryFolder, $folderName

    $tName = (Get-Item -Path $path | Select-Object -first 1).DisplayName
    $tNameClean = $tName.substring($tName.IndexOf('_') + 1, $tName.length - 1)
    
    $tID = (Get-Item -Path $path | Select-Object -first 1).ID
    $fileFullPath = "{0}\{1}{2}" -f $pathNewFolder, $tNameClean, $fileExt

    $fileDeliveryFolderModel =  "C:\inetpub\wwwroot\mfed\Website\data\model\"
    $fileExtModel = ".cs"
    $pathNewFolderModel = "{0}{1}" -f $fileDeliveryFolderModel, $folderName
    $fileFullPathModel = "{0}\I{1}{2}" -f $pathNewFolderModel, $tNameClean, $fileExtModel
    
    #Write-Host "pathNewFolderModel=" $pathNewFolderModel
    if (Test-Path $pathNewFolderModel){}else{
        New-Item -Path $pathNewFolderModel -ItemType Directory
    }


## 
##  Begin:Define:Interface File / template
## 
$iUsing1 = "using Frs.Mpls.Public.Foundation.Orm.Models;"
$iUsing2 = "using Glass.Mapper.Sc.Configuration.Attributes;"
$iUsing3 = "using Glass.Mapper.Sc.Fields;"
$iBlankLine = ""
$iNamespace = "namespace Frb.Mpls.Public.Feature."
$iNamespaceEnd = ".Models"
$iContainer = "{"
$iSitecoreType = "    [SitecoreType]"
$iDeclaration = "    public interface I"
$iInterfaceBegin = "    {"
$iSitecoreField = "        [SitecoreField]"
$iSitecoreFieldEnd = " { get; set; }"
$iInterfaceEnd = "    }"
$iContainerEnd = "}"

$iUsing1 | Out-File $fileFullPathModel -Append
$iUsing2 | Out-File $fileFullPathModel -Append
$iUsing3 | Out-File $fileFullPathModel -Append
$iBlankLine | Out-File $fileFullPathModel -Append
"{0}{1}{2}" -f $iNamespace, $folderName, $iNamespaceEnd | Out-File $fileFullPathModel -Append
$iContainer | Out-File $fileFullPathModel -Append
$iSitecoreType | Out-File $fileFullPathModel -Append

"{0}{1}" -f $iDeclaration, $tNameClean | Out-File $fileFullPathModel -Append
$iInterfaceBegin | Out-File $fileFullPathModel -Append


## 
##  End:Define:Interface File / template
## 

## 
##  Begin:Define:Json File / template
## 
    $tContainer = "{"
    $tLabel = '    "template" : {'
    $tNameLable = '        "name" : "'
    $tIDLable = '        "id" : "'
        "{0}{1}{2}{3}" -f $fType, $tID, $fEnd, $fEndComma | Out-File $fileFullPath -Append

    $tAttrLable = '        "attributes" : {'
    
    $tFieldLabel1 = '            "'
    $tFieldLabel2 = '" : {'
    
    $fDisplayName = '               "DisplayName" : "'
    $fEnd = '"'
    $fEndComma = ','
    $fType = '                "Type" : "'
    $fTitle = '                "Title" : "'
    $tFieldGroupEnd = "            }"    
    $tAttrEnd = "            }"    
    
    $tAttrEnd = "        }"
    $tEnd = "    }"
    $tContainerEnd = "}"

## 
##  End:Define:Json File / template
## 

## 
##  Begin:Write:Json File / template
## 
    $tContainer | Out-File $fileFullPath
    $tLabel | Out-File $fileFullPath -Append
    "{0}{1}{2}{3}" -f $tNameLable, $tName, $fEnd, $fEndComma | Out-File $fileFullPath -Append
    "{0}{1}{2}{3}" -f $tIDLable, $tID, $fEnd, $fEndComma | Out-File $fileFullPath -Append
    $tAttrLable | Out-File $fileFullPath -Append
## 
##  End:Write:Json File / template
## 
    
    $i = 0
    $itemCount = ( Get-ChildItem $path | Measure-Object ).Count;

    #Write-Host "path=" $path

    Get-ChildItem -Path $path | Where-Object  {$_.Name -ne "__Standard Values"} | Select-Object -first 1 | Get-ChildItem  | ForEach-Object {
        Write-Host "_.Name=" $_.Name
        Write-Host "_._Source=" $_._Source
        Write-Host "_.Type=" $_.Type
        if ($_.Type -eq "Datetime")
        {
            $pocoDataType = "        string "
        }elseif ($_.Type -eq "Single-Line Text")
        {
            $pocoDataType = "        string "
        }elseif ($_.Type -eq "Rich Text")
        {
            $pocoDataType = "        string "
        }elseif ($_.Type -eq "Multi-Line Text")
        {
            $pocoDataType = "        string "
        }elseif ($_.Type -eq "General Link")
        {
            $pocoDataType = "        Link "
        }elseif ($_.Type -eq "Checkbox")
        {
            $pocoDataType = "        bool "
        }elseif ($_.Type -eq "Image")
        {
            $pocoDataType = "        Image "
        }else {
            
        }
        
        #$_.Type
        $CR = "" | Out-File $fileFullPathModel -Append
        $iSitecoreField | Out-File $fileFullPathModel -Append
        $iPropertyDeclare = "{0}{1}{2}" -f $pocoDataType, $_.DisplayName, $iSitecoreFieldEnd | Out-File $fileFullPathModel -Append
        $iPropertyDeclare | Out-File $fileFullPathModel -Append
        $CR | Out-File $fileFullPathModel -Append

## 
##  Begin:Write:Json File / template
##     
        $tFieldStart = "{0}{1}{2}" -f $tFieldLabel1, $i, $tFieldLabel2 
        $tDisplayNameGroup = "{0}{1}{2}{3}" -f $fDisplayName, $_.DisplayName, $fEnd, $fEndComma
        $tDataTypeGroup = "{0}{1}{2}{3}" -f $fType, $_.Type, $fEnd, $fEndComma
        $tDataTitleGroup = "{0}{1}{2}" -f $fTitle, $_.Title, $fEnd

        $tFieldStart | Out-File $fileFullPath -Append
        $tDisplayNameGroup  | Out-File $fileFullPath -Append
        $tDataTypeGroup | Out-File $fileFullPath -Append
        $tDataTitleGroup | Out-File $fileFullPath -Append
## 
##  End:Write:Json File / template
## 
        $i = [int]$i + [int]1

        if ([int]$i -eq $itemCount) {
            $fFieldFinish = $tFieldGroupEnd 
        } Else {
            $fFieldFinish = "{0}{1}" -f $tFieldGroupEnd, $fEndComma 
        }
##  Json File / template::Write Field Finish
        $fFieldFinish | Out-File $fileFullPath -Append
    }

## 
##  Begin:Write:Json File / template
##   
    $tAttrEnd | Out-File $fileFullPath -Append
    $tEnd | Out-File $fileFullPath -Append
    $tContainerEnd | Out-File $fileFullPath -Append
## 
##  End:Write:Json File / template
## 

## 
##  Begin:Write:Interface File / template
##   

$iInterfaceEnd | Out-File $fileFullPathModel -Append
$iContainerEnd | Out-File $fileFullPathModel -Append
## 
##  End:Write:Interface File / template
##   

} # end function WriteTemplateJson([String] $path, [String] $folderName)

$featureFolder = "master:\templates\Feature" 

$metadataFolder = ""
## 

## create an interface class of each template
## process one template
## 
#$itemFullPath = "master:\templates\Feature\Metadata\_MplsMetadata"
#$itemFullPath = "master:\templates\Feature\Metadata\_Tagging"
#$itemFullPath = "master:\templates\Feature\Metadata\_SEOMetadata"

#$itemFullPath = "master:\templates\Feature\Article\_ThreeTakeaways"
#$itemFullPath = "master:\templates\Feature\Article\_ResearchPaper"

$itemFullPath = "master:\templates\Feature\PageContent\_KeyImage"

#$featureName = "Metadata"
#$featureName = "Article"
$featureName = "PageContent"

#WriteTemplateJson  $itemFullPath $featureName

Get-ChildItem -Path $featureFolder | ForEach-Object {
    $featureName = $_.DisplayName
    $tParentFullPath = "{0}\{1}" -f $featureFolder,  $featureName
    #Write-Host "tParentFullPath=" $tParentFullPath
    #Write-Host "featureFolder=" $featureFolder
    if (
        $featureName -eq "Article"# -Or
#        $featureName -eq "BeigeBook" -Or
#        $featureName -eq "Metadata" -Or
#        $featureName -eq "Person" -Or
#        $featureName -eq "PageContent" -Or
#        $featureName -eq "Topic" 
    )
    {
        #Write-Host "featureName=" $featureName
        #$tParentFullPath
        Get-ChildItem -Path $tParentFullPath | ForEach-Object {
            Write-Host "_.Name=" $_.Name
            $tName = $_.DisplayName
            $itemFullPath = "{0}\{1}{2}" -f $tParentFullPath, $tName, $fileExt
            #Write-Host "itemFullPath=" $itemFullPath
            $tNameClean = $tName.substring($tName.IndexOf('_') + 1, $tName.length - 1)
            if ($tName.IndexOf('_') -eq 0) {
                #only process files with _ in front of them
                Write-Host "tName=" $tName
                WriteTemplateJson  $itemFullPath $featureName
            }else {}
            #$tNameClean
#            if ($tNameClean -eq "Address")
#            {
                #$tNameClean
                #$itemFullPath
                #Write-Host "we got here"
#            }else{}
        }
    
    }else
    {
        
    }
}